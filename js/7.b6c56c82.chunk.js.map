{"version":3,"sources":["style/about.js"],"names":["window","NodeList","prototype","forEach","Array","Object","assign","defineProperty","value","e","t","TypeError","n","r","arguments","length","o","c","hasOwnProperty","call","writable","configurable","CustomEvent","bubbles","cancelable","detail","document","createEvent","initCustomEvent","Event","miscPolyfillsForIE","makeMePretty","querySelector","constructor","container","options","undefined","this","settings","accordion","initClass","activeClass","heightClass","_container","_panels","querySelectorAll","events","openingPanel","openedPanel","closingPanel","closedPanel","_setPanelHeight","panel","contents","style","height","scrollHeight","_removePanelHeight","open","dispatchEvent","_afterOpen","classList","add","_endOpen","close","_afterClose","setTimeout","remove","_endClose","toggle","openSinglePanel","element","openAll","closeAll","_attachEvents","toggler","addEventListener","isReadingHeight","contains","preventDefault","propToWatch","target","propertyName","init"],"mappings":"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","file":"static/js/7.b6c56c82.chunk.js","sourcesContent":["miscPolyfillsForIE()\r\n\r\n/*\r\nlet accordion = new Collapse(element, { option: value}).init();\r\n\r\n  Options - { option: defaultValue }\r\n    accordion: false,\r\n    initClass: 'collapse-init',\r\n    activeClass: 'panel-active',\r\n    heightClass: 'collapse-reading-height',\r\n\r\n  Methods - accordion.method(panel)\r\n    open(panel)\r\n    close(panel)\r\n    toggle(panel)\r\n    openSinglePanel(panel) [AKA accordion mode]\r\n    openAll()\r\n    closeAll()\r\n\r\n  Events - panel.addEventListener('event')\r\n    openingPanel\r\n    openedPanel\r\n    closingPanel\r\n    closedPanel\r\n*/\r\n\r\nclass Collapse {\r\n  constructor(container, options = {}) {\r\n    let defaults = {\r\n      accordion: false,\r\n      initClass: 'collapse-init',\r\n      activeClass: 'panel-active',\r\n      heightClass: 'collapse-reading-height',\r\n    }\r\n    \r\n    this.settings = Object.assign({}, defaults, options)\r\n    \r\n    this._container = container\r\n    this._panels = container.querySelectorAll('details')\r\n    \r\n    this.events = {\r\n      openingPanel: new CustomEvent('openingPanel'),\r\n      openedPanel: new CustomEvent('openedPanel'),\r\n      closingPanel: new CustomEvent('closingPanel'),\r\n      closedPanel: new CustomEvent('closedPanel'),\r\n    }\r\n  }  \r\n\r\n  // Sets height of panel content\r\n  _setPanelHeight( panel ) {\r\n    let contents = panel.querySelector('summary + *')\r\n    \r\n    contents.style.height = `${contents.scrollHeight }px`\r\n  }\r\n\r\n  // Removes height of panel content\r\n  _removePanelHeight( panel ) {\r\n    let contents = panel.querySelector('summary + *')\r\n    \r\n    contents.style.height = null\r\n  }\r\n  \r\n  //=== Open panel\r\n  open(panel) {\r\n    panel.dispatchEvent( this.events.openingPanel )\r\n\r\n    panel.open = true\r\n  }\r\n\r\n  // Add height and active class, this triggers opening animation\r\n  _afterOpen(panel) {\r\n    this._setPanelHeight(panel)\r\n    panel.classList.add(this.settings.activeClass)\r\n  }\r\n\r\n  // Remove height on animation end since it's no longer needed\r\n  _endOpen(panel) {\r\n    panel.dispatchEvent( this.events.openedPanel )\r\n    \r\n    this._removePanelHeight(panel)\r\n  }\r\n  \r\n  //=== Close panel, not toggling the actual [open] attr!\r\n  close(panel) {\r\n    panel.dispatchEvent( this.events.closingPanel )\r\n    this._afterClose(panel)\r\n  }\r\n  \r\n  // Set height, wait a beat, then remove height to trigger closing animation\r\n  _afterClose(panel) {\r\n    this._setPanelHeight(panel)\r\n\r\n    setTimeout(() => {\r\n      panel.classList.remove(this.settings.activeClass)\r\n      this._removePanelHeight(panel)\r\n    }, 100) //help, this is buggy and hacky\r\n  }\r\n\r\n  // Actually closes panel once animation finishes\r\n  _endClose(panel) {\r\n    panel.dispatchEvent( this.events.closedPanel )\r\n    \r\n    panel.open = false\r\n  }\r\n  \r\n  //=== Toggles panel... just in case anyone needs this\r\n  toggle(panel) {\r\n    panel.open ? this.close(panel) : this.open(panel)\r\n  }\r\n\r\n  //=== Accordion closes all panels except the current passed panel \r\n  openSinglePanel(panel) {\r\n    this._panels.forEach((element) => {\r\n      if (panel == element && !panel.open) {\r\n        this.open(element)\r\n      } else {\r\n        this.close(element)\r\n      }\r\n    })\r\n  }\r\n  \r\n  //=== Opens all panels just because\r\n  openAll() {\r\n    this._panels.forEach((element) => {\r\n      this.open(element)\r\n    })\r\n  }\r\n  \r\n  //=== Closes all panels just in case\r\n  closeAll() {\r\n    this._panels.forEach((element) => {\r\n      this.close(element)\r\n    })\r\n  }\r\n  \r\n  // Now put it all together\r\n  _attachEvents() {\r\n    this._panels.forEach(panel => {\r\n      let toggler = panel.querySelector('summary')\r\n      let contents = panel.querySelector('summary + *')\r\n\r\n      // On panel open\r\n      panel.addEventListener('toggle', e => {\r\n        let isReadingHeight = panel.classList.contains(this.settings.heightClass)\r\n\r\n        if (panel.open && !isReadingHeight) {\r\n          this._afterOpen(panel)\r\n        }\r\n      })\r\n\r\n      toggler.addEventListener('click', e => {\r\n        // If accordion, stop default toggle behavior\r\n        if (this.settings.accordion) {\r\n          this.openSinglePanel(panel)\r\n          e.preventDefault()\r\n        }\r\n        \r\n        // On attempting close, stop default close behavior to substitute our own\r\n        else if (panel.open) {\r\n          this.close(panel)\r\n          e.preventDefault()\r\n        }\r\n        \r\n        // On open, proceed as normal (see toggle listener above)\r\n      })\r\n      \r\n      /*\r\n        transitionend fires once for each animated property, \r\n        but we want it to fire once for each click. \r\n        So let's make sure to watch only a single property\r\n        Note this makes complex animations with multiple transition-durations impossible\r\n        Sorry\r\n      */\r\n      let propToWatch = ''\r\n          \r\n      // On panel finishing open/close animation\r\n      contents.addEventListener('transitionend', (e) => {\r\n        // Ignore transitions from child elements\r\n        if(e.target !== contents) {\r\n          return\r\n        }\r\n          \r\n        // Set property to watch on first fire\r\n        if ( !propToWatch ) {propToWatch = e.propertyName}\r\n        \r\n        // If watched property matches currently animating property\r\n        if ( e.propertyName == propToWatch ) {\r\n          let wasOpened = panel.classList.contains(this.settings.activeClass)\r\n          wasOpened ? this._endOpen(panel) : this._endClose(panel)\r\n        }\r\n      })\r\n    })\r\n  }\r\n\r\n  init() {\r\n    // Attach functionality\r\n    this._attachEvents()\r\n    \r\n    // For styling purposes\r\n    this._container.classList.add(this.settings.initClass)\r\n    \r\n    return this\r\n  }\r\n}\r\n\r\nlet makeMePretty = document.querySelector('.collapse')\r\nlet accordion = new Collapse(makeMePretty, { accordion: true }).init()\r\n\r\n// hoisthoistupwego I'm stuck on a machine with IE11\r\nfunction miscPolyfillsForIE() {  \r\n  // NodeList.forEach() polyfill\r\n  // https://developer.mozilla.org/en-US/docs/Web/API/NodeList/forEach#Browser_Compatibility\r\n  if (window.NodeList && !NodeList.prototype.forEach) {\r\n    NodeList.prototype.forEach = Array.prototype.forEach\r\n  }\r\n\r\n  // Object.assign() polyfill \r\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\r\n  typeof Object.assign != 'function' && Object.defineProperty(Object,'assign',{value:function(e,t){if(e == null){throw new TypeError('Cannot convert undefined or null to object')}for(var n = Object(e),r = 1;r < arguments.length;r++){let o = arguments[r];if(o != null){for(let c in o){Object.prototype.hasOwnProperty.call(o,c) && (n[c] = o[c])}}}return n},writable:!0,configurable:!0})\r\n  \r\n  // CustomEvent polyfill\r\n  // https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent\r\n  /* eslint-disable-next-line */\r\n  !function(){if(typeof window.CustomEvent == 'function'){return!1}function t(t,e){e = e || {bubbles:!1,cancelable:!1,detail:void 0};let n = document.createEvent('CustomEvent');return n.initCustomEvent(t,e.bubbles,e.cancelable,e.detail),n}t.prototype = window.Event.prototype,window.CustomEvent = t}()\r\n}\r\n"],"sourceRoot":""}